using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace ExchangeRateDB.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Currencies",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Symbol = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Currencies", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UpdateLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DbUpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ApiCallSuccess = table.Column<bool>(type: "bit", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UpdateLogs", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Rates",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Value = table.Column<decimal>(type: "decimal(20,10)", nullable: false),
                    Date = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Rates", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Rates_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "Currencies",
                columns: new[] { "Id", "Name", "Symbol" },
                values: new object[,]
                {
                    { 1, "United Arab Emirates Dirham", "AED" },
                    { 2, "Afghan Afghani", "AFN" },
                    { 3, "Albanian Lek", "ALL" },
                    { 4, "Armenian Dram", "AMD" },
                    { 5, "Netherlands Antillean Guilder", "ANG" },
                    { 6, "Angolan Kwanza", "AOA" },
                    { 7, "Argentine Peso", "ARS" },
                    { 8, "Australian Dollar", "AUD" },
                    { 9, "Aruban Florin", "AWG" },
                    { 10, "Azerbaijani Manat", "AZN" },
                    { 11, "Bosnian Convertible Mark", "BAM" },
                    { 12, "Barbadian or Bajan Dollar", "BBD" },
                    { 13, "Bangladeshi Taka", "BDT" },
                    { 14, "Bulgarian Lev", "BGN" },
                    { 15, "Bahraini Dinar", "BHD" },
                    { 16, "Burundian Franc", "BIF" },
                    { 17, "Bermudian Dollar", "BMD" },
                    { 18, "Bruneian Dollar", "BND" },
                    { 19, "Bolivian Bolíviano", "BOB" },
                    { 20, "Brazilian Real", "BRL" },
                    { 21, "Bahamian Dollar", "BSD" },
                    { 22, "Bhutanese Ngultrum", "BTN" },
                    { 23, "Botswana Pula", "BWP" },
                    { 24, "Belarusian Ruble", "BYN" },
                    { 25, "Belizean Dollar", "BZD" },
                    { 26, "Canadian Dollar", "CAD" },
                    { 27, "Congolese Franc", "CDF" },
                    { 28, "Swiss Franc", "CHF" },
                    { 29, "Chilean Peso", "CLP" },
                    { 30, "Chinese Yuan Renminbi", "CNY" },
                    { 31, "Colombian Peso", "COP" },
                    { 32, "Costa Rican Colon", "CRC" },
                    { 33, "Cuban Convertible Peso", "CUC" },
                    { 34, "Cuban Peso", "CUP" },
                    { 35, "Cape Verdean Escudo", "CVE" },
                    { 36, "Czech Koruna", "CZK" },
                    { 37, "Djiboutian Franc", "DJF" },
                    { 38, "Danish Krone", "DKK" },
                    { 39, "Dominican Peso", "DOP" },
                    { 40, "Algerian Dinar", "DZD" },
                    { 41, "Egyptian Pound", "EGP" },
                    { 42, "Eritrean Nakfa", "ERN" },
                    { 43, "Ethiopian Birr", "ETB" },
                    { 44, "Euro", "EUR" },
                    { 45, "Fijian Dollar", "FJD" },
                    { 46, "Falkland Island Pound", "FKP" },
                    { 47, "British Pound Sterling", "GBP" },
                    { 48, "Georgian Lari", "GEL" },
                    { 49, "Guernsey Pound", "GGP" },
                    { 50, "Ghanaian Cedi", "GHS" },
                    { 51, "Gibraltar Pound", "GIP" },
                    { 52, "Gambian Dalasi", "GMD" },
                    { 53, "Guinean Franc", "GNF" },
                    { 54, "Guatemalan Quetzal", "GTQ" },
                    { 55, "Guyanese Dollar", "GYD" },
                    { 56, "Hong Kong Dollar", "HKD" },
                    { 57, "Honduran Lempira", "HNL" },
                    { 58, "Croatian Kuna", "HRK" },
                    { 59, "Haitian Gourde", "HTG" },
                    { 60, "Hungarian Forint", "HUF" },
                    { 61, "Indonesian Rupiah", "IDR" },
                    { 62, "Israeli Shekel", "ILS" },
                    { 63, "Isle of Man Pound", "IMP" },
                    { 64, "Indian Rupee", "INR" },
                    { 65, "Iraqi Dinar", "IQD" },
                    { 66, "Iranian Rial", "IRR" },
                    { 67, "Icelandic Krona", "ISK" },
                    { 68, "Jersey Pound", "JEP" },
                    { 69, "Jamaican Dollar", "JMD" },
                    { 70, "Jordanian Dinar", "JOD" },
                    { 71, "Japanese Yen", "JPY" },
                    { 72, "Kenyan Shilling", "KES" },
                    { 73, "Kyrgyzstani Som", "KGS" },
                    { 74, "Cambodian Riel", "KHR" },
                    { 75, "Comorian Franc", "KMF" },
                    { 76, "North Korean Won", "KPW" },
                    { 77, "South Korean Won", "KRW" },
                    { 78, "Kuwaiti Dinar", "KWD" },
                    { 79, "Caymanian Dollar", "KYD" },
                    { 80, "Kazakhstani Tenge", "KZT" },
                    { 81, "Lao Kip", "LAK" },
                    { 82, "Lebanese Pound", "LBP" },
                    { 83, "Sri Lankan Rupee", "LKR" },
                    { 84, "Liberian Dollar", "LRD" },
                    { 85, "Basotho Loti", "LSL" },
                    { 86, "Libyan Dinar", "LYD" },
                    { 87, "Moroccan Dirham", "MAD" },
                    { 88, "Moldovan Leu", "MDL" },
                    { 89, "Malagasy Ariary", "MGA" },
                    { 90, "Macedonian Denar", "MKD" },
                    { 91, "Burmese Kyat", "MMK" },
                    { 92, "Mongolian Tughrik", "MNT" },
                    { 93, "Macau Pataca", "MOP" },
                    { 94, "Mauritanian Ouguiya", "MRO" },
                    { 95, "Mauritanian Ouguiya", "MRU" },
                    { 96, "Mauritian Rupee", "MUR" },
                    { 97, "Maldivian Rufiyaa", "MVR" },
                    { 98, "Malawian Kwacha", "MWK" },
                    { 99, "Mexican Peso", "MXN" },
                    { 100, "Malaysian Ringgit", "MYR" },
                    { 101, "Mozambican Metical", "MZN" },
                    { 102, "Namibian Dollar", "NAD" },
                    { 103, "Nigerian Naira", "NGN" },
                    { 104, "Nicaraguan Cordoba", "NIO" },
                    { 105, "Norwegian Krone", "NOK" },
                    { 106, "Nepalese Rupee", "NPR" },
                    { 107, "New Zealand Dollar", "NZD" },
                    { 108, "Omani Rial", "OMR" },
                    { 109, "Panamanian Balboa", "PAB" },
                    { 110, "Peruvian Sol", "PEN" },
                    { 111, "Papua New Guinean Kina", "PGK" },
                    { 112, "Philippine Peso", "PHP" },
                    { 113, "Pakistani Rupee", "PKR" },
                    { 114, "Polish Złoty", "PLN" },
                    { 115, "Paraguayan Guarani", "PYG" },
                    { 116, "Qatari Riyal", "QAR" },
                    { 117, "Romanian Leu", "RON" },
                    { 118, "Serbian Dinar", "RSD" },
                    { 119, "Russian Ruble", "RUB" },
                    { 120, "Rwandan Franc", "RWF" },
                    { 121, "Saudi Arabian Riyal", "SAR" },
                    { 122, "Solomon Islander Dollar", "SBD" },
                    { 123, "Seychellois Rupee", "SCR" },
                    { 124, "Sudanese Pound", "SDG" },
                    { 125, "Swedish Krona", "SEK" },
                    { 126, "Singapore Dollar", "SGD" },
                    { 127, "Saint Helenian Pound", "SHP" },
                    { 128, "Sierra Leonean Leone", "SLL" },
                    { 129, "Somali Shilling", "SOS" },
                    { 130, "Seborgan Luigino", "SPL" },
                    { 131, "Surinamese Dollar", "SRD" },
                    { 132, "Sao Tomean Dobra", "STN" },
                    { 133, "Salvadoran Colon", "SVC" },
                    { 134, "Syrian Pound", "SYP" },
                    { 135, "Swazi Lilangeni", "SZL" },
                    { 136, "Thai Baht", "THB" },
                    { 137, "Tajikistani Somoni", "TJS" },
                    { 138, "Turkmenistani Manat", "TMT" },
                    { 139, "Tunisian Dinar", "TND" },
                    { 140, "Tongan Pa'anga", "TOP" },
                    { 141, "Turkish Lira", "TRY" },
                    { 142, "Trinidadian Dollar", "TTD" },
                    { 143, "Tuvaluan Dollar", "TVD" },
                    { 144, "Taiwan New Dollar", "TWD" },
                    { 145, "Tanzanian Shilling", "TZS" },
                    { 146, "Ukrainian Hryvnia", "UAH" },
                    { 147, "Ugandan Shilling", "UGX" },
                    { 148, "US Dollar", "USD" },
                    { 149, "Uruguayan Peso", "UYU" },
                    { 150, "Uzbekistani Som", "UZS" },
                    { 151, "Venezuelan Bolívar", "VEF" },
                    { 152, "Venezuelan Bolívar Soberano", "VES" },
                    { 153, "Vietnamese Dong", "VND" },
                    { 154, "Ni-Vanuatu Vatu", "VUV" },
                    { 155, "Samoan Tala", "WST" },
                    { 156, "Central African CFA Franc BEAC", "XAF" },
                    { 157, "East Caribbean Dollar", "XCD" },
                    { 158, "Special Drawing Rights", "XDR" },
                    { 159, "West African CFA franc", "XOF" },
                    { 160, "CFP Franc", "XPF" },
                    { 161, "Yemeni Rial", "YER" },
                    { 162, "South African Rand", "ZAR" },
                    { 163, "Zambian Kwacha", "ZMW" },
                    { 164, "Zimbabwean Dollar", "ZWL" }
                });

            migrationBuilder.InsertData(
                table: "UpdateLogs",
                columns: new[] { "Id", "ApiCallSuccess", "DbUpdateDate", "Message" },
                values: new object[] { 1, false, new DateTime(2023, 8, 16, 16, 56, 40, 544, DateTimeKind.Local).AddTicks(402), "DB Created" });

            migrationBuilder.InsertData(
                table: "Rates",
                columns: new[] { "Id", "CurrencyId", "Date", "Value" },
                values: new object[,]
                {
                    { 1, 1, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7901), 4.026409m },
                    { 2, 2, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7907), 92.482921m },
                    { 3, 3, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7910), 103.792055m },
                    { 4, 4, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7913), 426.367363m },
                    { 5, 5, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7917), 1.981148m },
                    { 6, 6, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7920), 904.502417m },
                    { 7, 7, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7923), 314.514925m },
                    { 8, 8, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7926), 1.686486m },
                    { 9, 9, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7934), 1.9762m },
                    { 10, 10, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7938), 1.868175m },
                    { 11, 11, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7942), 1.95565m },
                    { 12, 12, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7945), 2.21953m },
                    { 13, 13, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7949), 120.32079m },
                    { 14, 14, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7953), 1.958954m },
                    { 15, 15, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7957), 0.414368m },
                    { 16, 16, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7961), 3115.461523m },
                    { 17, 17, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7965), 1.096366m },
                    { 18, 18, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7970), 1.484086m },
                    { 19, 19, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7975), 7.596419m },
                    { 20, 20, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7980), 5.380648m },
                    { 21, 21, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(7985), 1.099216m },
                    { 22, 22, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8019), 91.079128m },
                    { 23, 23, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8024), 14.834864m },
                    { 24, 24, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8029), 2.774688m },
                    { 25, 25, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8108), 2.21583m },
                    { 26, 26, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8136), 1.473462m },
                    { 27, 27, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8143), 2675.133625m },
                    { 28, 28, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8149), 0.961372m },
                    { 29, 29, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8179), 930.518772m },
                    { 30, 30, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8185), 7.933967m },
                    { 31, 31, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8191), 4343.267539m },
                    { 32, 32, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8198), 588.254971m },
                    { 33, 33, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8205), 1.096366m },
                    { 34, 34, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8212), 29.053701m },
                    { 35, 35, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8219), 110.25656m },
                    { 36, 36, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8226), 24.094513m },
                    { 37, 37, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8234), 195.725018m },
                    { 38, 38, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8241), 7.461653m },
                    { 39, 39, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8249), 62.385225m },
                    { 40, 40, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8256), 149.040435m },
                    { 41, 41, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8264), 33.82941m },
                    { 42, 42, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8272), 16.445491m },
                    { 43, 43, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8280), 60.626259m },
                    { 44, 44, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8287), 0m },
                    { 45, 45, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8296), 2.461566m },
                    { 46, 46, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8304), 0.86379m },
                    { 47, 47, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8313), 0.863688m },
                    { 48, 48, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8321), 2.856078m },
                    { 49, 49, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8330), 0.86379m },
                    { 50, 50, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8339), 12.28406m },
                    { 51, 51, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8348), 0.86379m },
                    { 52, 52, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8357), 66.224736m },
                    { 53, 53, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8366), 9448.276769m },
                    { 54, 54, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8376), 8.646338m },
                    { 55, 55, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8386), 229.982396m },
                    { 56, 56, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8395), 8.571007m },
                    { 57, 57, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8405), 27.03993m },
                    { 58, 58, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8415), 7.371811m },
                    { 59, 59, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8446), 150.048514m },
                    { 60, 60, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8456), 383.750479m },
                    { 61, 61, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8466), 16800.220403m },
                    { 62, 62, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8475), 4.086709m },
                    { 63, 63, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8485), 0.86379m },
                    { 64, 64, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8496), 90.950857m },
                    { 65, 65, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8506), 1439.789789m },
                    { 66, 66, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8517), 46389.993829m },
                    { 67, 67, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8528), 144.943779m },
                    { 68, 68, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8538), 0.86379m },
                    { 69, 69, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8549), 169.946991m },
                    { 70, 70, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8560), 0.776012m },
                    { 71, 71, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8571), 158.86897m },
                    { 72, 72, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8582), 156.318034m },
                    { 73, 73, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8593), 96.502564m },
                    { 74, 74, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8605), 4544.652124m },
                    { 75, 75, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8617), 493.172914m },
                    { 76, 76, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8628), 986.707632m },
                    { 77, 77, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8640), 1458.828859m },
                    { 78, 78, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8652), 0.337265m },
                    { 79, 79, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8664), 0.91603m },
                    { 80, 80, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8677), 491.022414m },
                    { 81, 81, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8689), 21367.364407m },
                    { 82, 82, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8702), 16500.736929m },
                    { 83, 83, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8715), 352.882988m },
                    { 84, 84, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8728), 204.695685m },
                    { 85, 85, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8740), 20.506181m },
                    { 86, 86, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8798), 5.271596m },
                    { 87, 87, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8811), 10.742178m },
                    { 88, 88, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8825), 19.374517m },
                    { 89, 89, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8838), 4954.620742m },
                    { 90, 90, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8867), 61.615284m },
                    { 91, 91, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8881), 2308.423299m },
                    { 92, 92, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8895), 3790.742518m },
                    { 93, 93, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8909), 8.850323m },
                    { 94, 94, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8924), 391.402501m },
                    { 95, 96, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8938), 49.559851m },
                    { 96, 97, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8953), 16.829634m },
                    { 97, 98, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8968), 1193.00868m },
                    { 98, 99, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8982), 18.652371m },
                    { 99, 100, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(8997), 5.029074m },
                    { 100, 101, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9012), 69.345568m },
                    { 101, 102, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9027), 20.506134m },
                    { 102, 103, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9043), 843.328873m },
                    { 103, 104, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9058), 40.216922m },
                    { 104, 105, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9073), 11.432252m },
                    { 105, 106, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9088), 145.726845m },
                    { 106, 107, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9104), 1.831857m },
                    { 107, 108, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9120), 0.422143m },
                    { 108, 109, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9136), 1.099316m },
                    { 109, 110, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9152), 4.031691m },
                    { 110, 111, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9169), 3.994694m },
                    { 111, 112, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9185), 61.991283m },
                    { 112, 113, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9202), 317.028233m },
                    { 113, 114, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9218), 4.441012m },
                    { 114, 115, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9235), 7987.388595m },
                    { 115, 116, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9252), 3.991911m },
                    { 116, 117, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9269), 4.946846m },
                    { 117, 118, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9287), 117.261024m },
                    { 118, 119, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9304), 109.631168m },
                    { 119, 120, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9322), 1297.000719m },
                    { 120, 121, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9339), 4.113526m },
                    { 121, 122, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9357), 9.175254m },
                    { 122, 123, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9375), 14.610216m },
                    { 123, 124, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9393), 659.347746m },
                    { 124, 125, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9411), 11.850663m },
                    { 125, 126, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9430), 1.482401m },
                    { 126, 127, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9464), 1.334004m },
                    { 127, 128, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9504), 21653.230396m },
                    { 128, 129, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9523), 624.384499m },
                    { 129, 131, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9563), 41.908635m },
                    { 130, 134, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9621), 14362.126262m },
                    { 131, 135, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9639), 20.703415m },
                    { 132, 136, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9658), 38.449963m },
                    { 133, 137, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9677), 12.053477m },
                    { 134, 138, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9696), 3.837281m },
                    { 135, 139, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9716), 3.386401m },
                    { 136, 140, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9735), 2.600964m },
                    { 137, 141, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9754), 29.687515m },
                    { 138, 142, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9774), 7.461429m },
                    { 139, 144, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9794), 34.983401m },
                    { 140, 145, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9815), 2753.689215m },
                    { 141, 146, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9835), 40.597492m },
                    { 142, 147, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9855), 4100.686108m },
                    { 143, 148, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9876), 1.096366m },
                    { 144, 149, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9897), 41.736805m },
                    { 145, 150, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9918), 13273.983925m },
                    { 146, 151, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9939), 3433270.83167m },
                    { 147, 152, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9960), 32.963995m },
                    { 148, 153, new DateTime(2023, 8, 16, 14, 56, 40, 543, DateTimeKind.Utc).AddTicks(9981), 26049.657995m },
                    { 149, 154, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(3), 132.252171m },
                    { 150, 155, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(25), 3.026002m },
                    { 151, 156, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(46), 655.906793m },
                    { 152, 157, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(129), 2.962985m },
                    { 153, 158, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(151), 0.822237m },
                    { 154, 159, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(173), 655.906793m },
                    { 155, 160, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(196), 119.668756m },
                    { 156, 161, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(219), 274.475646m },
                    { 157, 162, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(241), 20.7789m },
                    { 158, 163, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(286), 20.963395m },
                    { 159, 164, new DateTime(2023, 8, 16, 14, 56, 40, 544, DateTimeKind.Utc).AddTicks(309), 353.02943m }
                });

            migrationBuilder.CreateIndex(
                name: "IX_Rates_CurrencyId",
                table: "Rates",
                column: "CurrencyId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Rates");

            migrationBuilder.DropTable(
                name: "UpdateLogs");

            migrationBuilder.DropTable(
                name: "Currencies");
        }
    }
}
